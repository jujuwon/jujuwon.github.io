{"componentChunkName":"component---src-templates-blog-post-js","path":"/WEB/fetch-api/","result":{"data":{"site":{"siteMetadata":{"title":"Juwon's blog","author":"Juwon Lee","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"047757d4-0cb4-5c62-9a7a-8c4e8f1a2d3d","excerpt":"Javascript 에서 Fetch API 란 ? Promise Fetch API Promise  fetch 메소드는 Promise 를 리턴한다. Promise 는 무엇인가 ? Promise 는 비동기 오퍼레이션 Asynchronous Operation 에서 사용된다. 그렇다면 비동기 오퍼레이션이란 무엇인가 ? 자바스크립트는 싱글 스레드 환경에서 동작한다. 그 말은 HTTP 요청을 백엔드에 보냈는데, 백엔드가 이를 처리하는 데 1분이 걸리면 브라우저는…","html":"<blockquote>\n<p><strong>Javascript 에서 Fetch API 란 ?</strong></p>\n</blockquote>\n<ul>\n<li><a href=\"#promise\">Promise</a></li>\n<li><a href=\"#fetch\">Fetch API</a></li>\n</ul>\n<h3 id=\"promise-a-idpromisea\" style=\"position:relative;\"><a href=\"#promise-a-idpromisea\" aria-label=\"promise a idpromisea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise <a id=\"promise\"></a></h3>\n<hr>\n<p>fetch 메소드는 Promise 를 리턴한다.</p>\n<p>Promise 는 무엇인가 ?</p>\n<p>Promise 는 비동기 오퍼레이션 <em>Asynchronous Operation</em> 에서 사용된다.</p>\n<p>그렇다면 비동기 오퍼레이션이란 무엇인가 ?</p>\n<p>자바스크립트는 싱글 스레드 환경에서 동작한다.</p>\n<p>그 말은 HTTP 요청을 백엔드에 보냈는데, 백엔드가 이를 처리하는 데 1분이 걸리면</p>\n<p>브라우저는 1분간 아무것도 못하는 상태가 된다는 것이다.</p>\n<p>이를 극복하려고 자바스크립트 엔진은 자바스크립트 스레드 밖에서</p>\n<p>이런 오퍼레이션 (Web API) 을 실행해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:8080/todo'</span><span class=\"token punctuation\">)</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// callback 함수</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드는 fetch 가 아닌 XMLHttpRequest 오브젝트를 이용해 GET 요청을 보내는 방법이다.</p>\n<p>여기서 문제는 무엇일까 ?</p>\n<p>콜백 함수 내에서 다른 HTTP 요청을 하고 그 두 번째 요청을 위한 콜백을 또 정의하는 과정에서</p>\n<p>코드가 굉장히 복잡해진다.</p>\n<p>이런 것은 콜백 지옥 <strong><em>Callback Hell</em></strong> 이라고 부른다.</p>\n<p>Promise 는 콜백 지옥을 피할 수 있는 방법 중 하나다.</p>\n<p>Promise 는 말 그대로 이 함수를 실행한 후</p>\n<p>Promise 오브젝트에 명시된 사항들을 실행시켜 주겠다는 약속이다.</p>\n<p>Promise 에는 세 가지 상태가 있다.</p>\n<ul>\n<li>Pending</li>\n<li>Resolve</li>\n<li>Reject</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Promise 를 사용한 XMLHttpRequest</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:8080/todo'</span><span class=\"token punctuation\">)</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Resolve 상태</span>\n    <span class=\"token punctuation\">}</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Reject 상태</span>\n    <span class=\"token punctuation\">}</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Pending 상태</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Resolved '</span> <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rejected '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pending 은 말 그대로 오퍼레이션이 끝나길 기다리는 상태다.</p>\n<p>오퍼레이션이 성공적으로 끝나면 resolve() 함수를 통해</p>\n<p>이 오퍼레이션이 성공적으로 끝났음을 알리고 원하는 값을 전달할 수 있다.</p>\n<p>이때 resolve 는 then 의 매개변수로 넘어오는 함수를 실행한다.</p>\n<p>오퍼레이션 중 에러가 나는 경우 reject() 함수를 콜한다.</p>\n<p>그 결과로 catch 매개변수로 넘어오는 함수가 실행된다.</p>\n<p>then 이나 catch 로 넘기는 함수들은 당장 실행되는 것이 아니라</p>\n<p>매개변수로 할 일을 넘겨주기만 한다.</p>\n<p>실제 이 함수들이 실행되는 것은 resolve 와 reject 가 실행되는 시점이다.</p>\n<h3 id=\"fetch-api-a-idfetcha\" style=\"position:relative;\"><a href=\"#fetch-api-a-idfetcha\" aria-label=\"fetch api a idfetcha permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch API <a id=\"fetch\"></a></h3>\n<hr>\n<p>fetch 는 자바스크립트가 제공하는 메소드로,</p>\n<p>API 서버로 http 요청을 송수신 할 수 있도록 도와준다.</p>\n<p>fetch 는 url 을 매개변수로 받거나 url 과 options 를 매개변수로 받을 수 있다.</p>\n<p>fetch() 함수는 Promise 오브젝트를 리턴한다.</p>\n<p>따라서 then 과 catch 에 콜백 함수를 전달해 응답을 처리할 수 있다.</p>\n<p>먼저 url 만 이용해 GET 요청을 보내는 방법을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:8080/todo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// GET</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// response 수신 시 하고 싶은 작업</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러 시 하고 싶은 작업</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>fetch 는 첫 번째 매개변수로 uri 를 받는다.</p>\n<p>디폴트로는 GET 메소드를 사용하는 것과 같다.</p>\n<p>then 에는 응답을 받은 후 실행할 함수 response ⇒ {} 를 매개변수로,</p>\n<p>catch 에는 예외 발생 시 실행할 함수 e ⇒ {} 를 넘긴다.</p>\n<p>메소드를 명시하고 싶은 경우나 헤더와 바디를 함께 보내야 할 경우에는</p>\n<p>아래와 같이 두 번째 매개변수에 요청에 대한 정보가 담긴 오브젝트를 넘겨준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:8080/todo'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// response 수신 시 하고 싶은 작업</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러 시 하고 싶은 작업</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Fetch API","date":"January 20, 2022"}}},"pageContext":{"slug":"/WEB/fetch-api/","previous":{"fields":{"slug":"/WEB/rest-api/"},"frontmatter":{"title":"REST API 란"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}